# -*- coding: utf-8 -*-
"""Week 4 solution Data Analytics Intern.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O7gE-5FE8ArmOxGLyfw9LMLDf0FXdUZg
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

country = pd.read_csv("/content/Metadata_Country.csv")
population = pd.read_csv("/content/country_population.csv")
fertility = pd.read_csv("/content/fertility_rate.csv")
life_expectency = pd.read_csv("/content/life_expectancy.csv")

country.head()

country = country[['Country Code','Region']]
country.shape

country.isna().sum()

population.head()

population.isna().sum()

years = [str(i) for i in range(1960,2017)]

years

population.drop(['Indicator Name','Indicator Code'],axis = 1, inplace = True)

population.head()

population.shape

population.dropna(axis=0, inplace=True)

population.shape



df = pd.melt(population,
             id_vars ='Country Code',
             value_vars = years,
             var_name ='Year',
             value_name = 'Population'
             )

df.head()

df.isna().sum()

df.tail()

df['Country Code'].value_counts()

df.shape

258 * 57

df.head()

country.head()

df_merged = pd.merge(country,df,how='left',on='Country Code')
df_merged.head()

df_merged.shape

life_expectency.head()

life_expectency.drop(['Indicator Name','Indicator Code'],axis = 1, inplace = True)

life_expectency.head()

life_expectency.dropna(axis=0, inplace=True)

df_2 = pd.melt(life_expectency,
             id_vars ='Country Code',
             value_vars = years,
             var_name ='Year',
             value_name = 'life_expectency'
             )

df_2.head()

df_2.shape

df_merged.head()

df_merged.shape

df_merged_2 = pd.merge(df_merged,df_2,how='left',on=['Country Code','Year'])
df_merged_2.head()

df_merged_2.shape

fertility.head()

fertility.drop(['Indicator Name','Indicator Code'],axis = 1, inplace = True)

fertility.head()

fertility.dropna(axis = 0, inplace = True)

df_3 = pd.melt(fertility,
             id_vars ='Country Name',
             value_vars = years,
             var_name ='Year',
             value_name = 'fertility'
             )

df_3.head()

df_3.shape

df_merged_3 = pd.merge(df_merged_2,df_3,how='left',on='Year')
df_merged_3.head()

df_merged_3.shape

df_merged_3.isna().sum()

df_merged_3.dropna(axis = 0, inplace = True)

df_merged_3.shape

df_merged_3.isna().sum()

def preprocess_df(df, value_name):
    """ remove missing values and put years in one column

    Parameters
    ----------
    df: dataframe
        the data that needs to be preprocessed

    value_name: string
        the name of the column that will contain the year's data

    Return
    ------
    preprocessed dataframe
    """
    years = [str(y) for y in range(1960, 2017)]

    # remove useless columns
    df.drop(['Country Name', 'Indicator Name', 'Indicator Code'], axis=1, inplace=True)

    # remove countries with missing value
    df.dropna(axis=0, inplace=True)

    # melt the dataframe to have years in one columns
    df = pd.melt(df,
                 id_vars='Country Code',
                 value_vars=years,
                 var_name='Year',
                 value_name=value_name)

    return df

country = country[['Country Code', 'Region']]
population = preprocess_df(population, 'Population')
fertility_rate = preprocess_df(fertility, 'Fertility Rate')
life_expectancy = preprocess_df(life_expectency, 'Life Expectancy')

# Merge the data into one dataframe
df = pd.merge(country, population, how='left', on='Country Code')
df = pd.merge(df, life_expectancy, how='left', on=['Country Code', 'Year'])
df = pd.merge(df, fertility_rate, how='left', on=['Country Code', 'Year'])

# Remove remaining lines with missing values
# They will appear if a country is in one dataset but not in another one
df.dropna(axis=0, inplace=True)

df.shape

df['Region'].value_counts()

df['Region'].value_counts().plot(kind='bar')

df['Region'].value_counts().plot(kind='pie')

df['Population'].value_counts()

import plotly.express as px

px.scatter(df,
           x="Fertility Rate",
           y="Life Expectancy",
           animation_frame="Year",
           animation_group="Country Code",
           size="Population",
           color="Region",
           hover_name="Country Code",
           log_x=True,
           size_max=55,
           range_x=[1,10],
           range_y=[10,100])

